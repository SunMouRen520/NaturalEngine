#version 410 core

layout(triangles, equal_spacing, ccw) in;

uniform mat4 gVP;
uniform float gDispFactor;
uniform float freq;
uniform int octaves;

uniform vec3 gEyeWorldPos;
uniform vec3 seed;
uniform vec4 clipPlane;

in vec3 WorldPos_ES_in[];
in vec2 TexCoord_ES_in[];
in vec3 Normal_ES_in[];

out vec3 WorldPos;
out vec2 texCoord;
out vec3 Normal;
out float distFromPos;
out float dispFactor;
out float height;

float Noise(int ind, int x, int y)
{
	const int primes[39] = int[39](995615039, 600173719, 701464987,
					831731269, 162318869, 136250887, 
					174329291, 946737083, 245679977,
				 362489573, 795918041, 350777237, 
				 457025711, 880830799, 909678923, 
				 787070341, 177340217, 593320781,	
				 405493717, 291031019, 391950901, 
				 458904767, 676625681, 424452397, 
				 531736441, 939683957, 810651871,
				997169939, 842027887, 423882827,
				192405871, 129403928, 102948294,
				102948203, 912030912, 910204948,
				958730910, 759204855, 859302983);

	int n = x + y * 57;
	n = (n << 13) ^ n;
	int a = primes[ind * 3], b = primes[ind * 3 + 1], c = primes[ind * 3 + 2];
	int t = (n * (n * n * a + b) + c) & 0x7fffffff;

	return float(1.0 - t / 1073741824.0);
}

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

float Random2D(in vec2 st)
{
	return fract(sin(dot(st.xy, vec2(12.9898, 78.233) + seed.xy)) * 43758.5453123);
}

float Interpolate(float a, float b, float x)
{
	// 余弦插值
	float ft = x * 3.1415927f;
	float f = (1 - cos(ft)) * 0.5;
	return a * (1 - f) + b * f;
}

float InterpolatedNoise(int ind, float x, float y) {
	int integer_X = int(floor(x));
	float fractional_X = fract(x);
	int integer_Y = int(floor(y));
	float fractional_Y = fract(y);
	vec2 randomInput = vec2(integer_X, integer_Y);
	float a = Random2D(randomInput);
	float b = Random2D(randomInput + vec2(1.0, 0.0));
	float c = Random2D(randomInput + vec2(0.0, 1.0));
	float d = Random2D(randomInput + vec2(1.0, 1.0));
	//float v1 = Random2D(randomInput);
	//float v2 = Random2D(randomInput + vec2(1.0, 0.0));
	//float v3 = Random2D(randomInput + vec2(0.0, 1.0));
	//float v4 = Random2D(randomInput + vec2(1.0, 1.0));

	vec2 w = vec2(fractional_X, fractional_Y);
	w = w*w*w*(10.0 + w*(-15.0 + 6.0*w));

	//fractional_X = smoothstep(0.0, 1.0, fractional_X);
	//fractional_Y = smoothstep(0.0, 1.0, fractional_Y);
	//return a + fractional_X*(b-a) + fractional_Y*c + fractional_X*fractional_Y*(d-c) - a*fractional_Y - fractional_X*fractional_Y*(b-a);
	float k0 = a, 
	k1 = b - a, 
	k2 = c - a, 
	k3 = d - c - b + a;

	return k0 + k1*w.x + k2*w.y + k3*w.x*w.y;
}

const mat2 m = mat2(0.8,-0.6,0.6,0.8);

uniform float power;


float perlin(float x, float y){
	
    int numOctaves = octaves;
	float persistence = 0.5;
	float total = 0,
		frequency = 0.005*freq,
		amplitude = gDispFactor;
	for (int i = 0; i < numOctaves; ++i) {
		frequency *= 2.;
		amplitude *= persistence;
		
		total += InterpolatedNoise( 0, x * frequency, y * frequency) * amplitude;
	}
	return pow(total, power);
}


float perlin(vec2 st){
    
    //st *= freq;
    
    //int numOctaves = 10;
	float persistence = 0.5;
	float total = 0.0,
		frequency = 0.005*freq,
		amplitude = gDispFactor;
	for (int i = 0; i < octaves; ++i) {
		frequency *= 2.0;
		amplitude *= persistence;

        //st = frequency*m*st;

		vec2 v = frequency*m*st;

		total += InterpolatedNoise(0, v.x,v.y) * amplitude;
	}
	return pow(total, power);
}

                                                                                      
void main()                                                                                     
{                                                                                               
    // Interpolate the attributes of the output vertex using the barycentric coordinates      
	// 使用重心坐标插值输出顶点的属性
    texCoord = interpolate2D(TexCoord_ES_in[0], TexCoord_ES_in[1], TexCoord_ES_in[2]);    
    Normal = interpolate3D(Normal_ES_in[0], Normal_ES_in[1], Normal_ES_in[2]);            
    Normal = normalize(Normal);                                                     
    WorldPos = interpolate3D(WorldPos_ES_in[0], WorldPos_ES_in[1], WorldPos_ES_in[2]);    
    

    // Displace the vertex along the normal     
	// 沿法线置换顶点
	float Displacement = perlin(WorldPos.xz);
	WorldPos += Normal * Displacement;
	
	gl_ClipDistance[0] = dot(clipPlane, vec4(WorldPos, 1.0));

	distFromPos = distance(WorldPos, gEyeWorldPos);
	dispFactor = gDispFactor;
	height = WorldPos.y;

    gl_Position = gVP * vec4(WorldPos, 1.0);                                              
}                                                                                               
