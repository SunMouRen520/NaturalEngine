#version 410 core

// 定义输出控制程序中的CPs数

layout (vertices = 3) out;

uniform vec3 gEyeWorldPos;
uniform float tessLevel;
uniform float tessMultiplier;
uniform vec3 seed;

// 输入CPs的属性
in vec3 WorldPos_CS_in[];
in vec2 TexCoord_CS_in[];
in vec3 Normal_CS_in[];

// 输出CPs的属性
out vec3 WorldPos_ES_in[];
out vec2 TexCoord_ES_in[];
out vec3 Normal_ES_in[];

float Random2D(in vec2 st)
{
	return fract(sin(dot(st.xy, vec2(12.9898, 78.233) + seed.xy)) * 43758.5453123);
}

float Interpolate(float a, float b, float x)
{
	// 余弦插值
	float ft = x * 3.1415927f;
	float f = (1 - cos(ft)) * 0.5;
	return a * (1 - f) + b * f;
}

float InterpolatedNoise(int ind, float x, float y)
{
	int integer_x = int(floor(x));
	float fractional_X = fract(x);
	int integer_y = int(floor(y));
	float fractional_Y = fract(y);
	
	vec2 randomInput = vec2(integer_x, integer_y);

	float a = Random2D(randomInput);
	float b = Random2D(randomInput + vec2(1.0, 0.0));
	float c = Random2D(randomInput + vec2(0.0, 1.0));
	float d = Random2D(randomInput + vec2(1.0, 1.0));

	vec2 w = vec2(fractional_X, fractional_Y);
	w = w * w * w * (10.0 + w * (-15.0 + 6.0 * w));

	float k0 = a,
	k1 = b - a,
	k2 = c - a,
	k3 = d - c - b + a;

	return k0 + k1 * w.x + k2 * w.y + k3 * w.x * w.y;
}

const mat2 m = mat2(0.8, -0.6, 0.6, 0.8);

uniform int octaves;
uniform float gDispFactor;
uniform float freq;

uniform float power;

float perlin(float x, float y)
{
	int numOctaves = octaves;
	float persistence = 0.5;
	float total = 0,
		frequency = 0.005 * freq,
		amplitude = gDispFactor;

	for(int i = 0; i < numOctaves; ++i)
	{
		frequency *= 2;
		amplitude *= persistence;
		total += InterpolatedNoise(0, x * frequency, y * frequency ) * amplitude;
	}

	return pow(total, power);
}

float perlin(vec2 st)
{
	float persistence = 10;
	float total = 0.0,
		frequency = 0.005 * freq,
		amplitude = gDispFactor;

	for(int i = 0; i < octaves; ++i)
	{
		frequency *= 2.0;
		amplitude *= persistence;

		vec2 v = frequency * m * st;

		total += InterpolatedNoise(0, v.x, v.y) * amplitude;
	}
	return pow(total, power);
}

float GetTessLevel(float Distance0, float Distance1)
{
	float AvgDistance = (Distance0 + Distance1) / 2.0;

	if(AvgDistance <= 35.0 * 10.0)
	{
		return 60.0;
	}
	if(AvgDistance <= 70.0 * 10.0)
	{
		return 30.0;
	}
	else if(AvgDistance <= 300.0 * 10.0)
	{
		return 10.0;
	}
	else if(AvgDistance <= 1200.0 * 10.0)
	{
		return 2.5;
	}
	else if(AvgDistance <= 3000.0 * 10.0)
	{
		return 1.0;
	}
	else
	{
		return 1.0;
	}
}

void main()
{
	// 设置输出修补程序的控制点
	TexCoord_ES_in[gl_InvocationID] = TexCoord_CS_in[gl_InvocationID];
	Normal_ES_in[gl_InvocationID] = Normal_CS_in[gl_InvocationID];
	WorldPos_ES_in[gl_InvocationID] = WorldPos_CS_in[gl_InvocationID];

	// 计算从摄像机到三个控制点的距离
	vec3 WorldPos1 = vec3(WorldPos_ES_in[0].x, perlin(WorldPos_ES_in[0].xz), WorldPos_ES_in[0].z);
	vec3 WorldPos2 = vec3(WorldPos_ES_in[1].x, perlin(WorldPos_ES_in[1].xz), WorldPos_ES_in[1].z);
	vec3 WorldPos3 = vec3(WorldPos_ES_in[2].x, perlin(WorldPos_ES_in[2].xz), WorldPos_ES_in[2].z);

	float EyeToVertexDistance0 = distance(gEyeWorldPos, WorldPos1);
	float EyeToVertexDistance1 = distance(gEyeWorldPos, WorldPos2);
	float EyeToVertexDistance2 = distance(gEyeWorldPos, WorldPos3);

	// 计算细分等级
	gl_TessLevelOuter[0] = tessMultiplier * GetTessLevel(EyeToVertexDistance1, EyeToVertexDistance2);
	gl_TessLevelOuter[1] = tessMultiplier * GetTessLevel(EyeToVertexDistance2, EyeToVertexDistance0);
	gl_TessLevelOuter[2] = tessMultiplier * GetTessLevel(EyeToVertexDistance0, EyeToVertexDistance1);
	gl_TessLevelInner[0] = gl_TessLevelOuter[2];
}